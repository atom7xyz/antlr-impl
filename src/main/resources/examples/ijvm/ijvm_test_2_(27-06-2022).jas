// Link: https://web.unica.it/unica/protected/380790/0/def/ref/MAT380784/
//
// Esempio:
// a = 5
// b = 3
// output = 6
//
.constant
	OBJREF 0x40
	endline 0x3b
.end-constant

.main
	.var
		a
        b
	.end-var

	LDC_W OBJREF
	INVOKEVIRTUAL input
	ISTORE a

	LDC_W OBJREF
	INVOKEVIRTUAL input
	ISTORE b

    LDC_W OBJREF
    ILOAD a
    LDC_W OBJREF
    ILOAD b
    BIPUSH 2
    INVOKEVIRTUAL div
    INVOKEVIRTUAL fun1

    LDC_W OBJREF
    LDC_W OBJREF
    ILOAD b
    ILOAD a
    INVOKEVIRTUAL fun1
    BIPUSH 5
    INVOKEVIRTUAL fun2
    IADD

	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print

	HALT
.end-main

.method fun2(a, b)
    BIPUSH 5
    ILOAD a
    ILOAD b
    IADD
    ISUB
    IFLT else

    LDC_W OBJREF
    ILOAD b
    BIPUSH 2
    INVOKEVIRTUAL mul
    ISTORE a
    GOTO end-if
    else:

    while:
        ILOAD b
        BIPUSH 10
        ISUB
        IFLT end-while

        ILOAD b
        LDC_W OBJREF
        ILOAD b
        ILOAD a
        INVOKEVIRTUAL mod
        ISUB
        ISTORE b

        ILOAD a
        LDC_W OBJREF
        ILOAD a
        BIPUSH 2
        INVOKEVIRTUAL div
        IADD
        ISTORE a

    GOTO while
    end-while:

    ILOAD b
    LDC_W OBJREF
    ILOAD a
    BIPUSH 2
    INVOKEVIRTUAL mod
    LDC_W OBJREF
    ILOAD b
    ILOAD a
    INVOKEVIRTUAL mod
    IADD
    IADD
    ISTORE b

    end-if:

    ILOAD b
    IRETURN
.end-method

.method fun1(x, y)
    .var
        i
    .end-var

    BIPUSH 0
    ISTORE i

    for:
        ILOAD y
        ILOAD x
        ISUB
        DUP
        IFLT end-for
        IFEQ end-for

        ILOAD x
        LDC_W OBJREF
        ILOAD y
        ILOAD x
        INVOKEVIRTUAL mod
        IADD
        ISTORE x

        IINC i 1
    GOTO for
    end-for:

    LDC_W OBJREF
    ILOAD x
    BIPUSH 2
    INVOKEVIRTUAL mod
    BIPUSH 1
    ISUB
    IFEQ then

    ILOAD y
    IRETURN

    then:

    LDC_W OBJREF
    ILOAD y
    BIPUSH 2
    INVOKEVIRTUAL div
    IRETURN
.end-method

.method mul(i, j)
    ILOAD j
    IFEQ zero
    IINC j  -1
    ILOAD i
    IFEQ zero
    LDC_W OBJREF
    ILOAD i
    ILOAD j
    INVOKEVIRTUAL mul
    ILOAD i
	IADD
	GOTO fine
zero:
	BIPUSH 0x0
fine:
	IRETURN
.end-method


.method mod (a, b)
	ILOAD a
	IFEQ stop
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL mod
	GOTO fine
stop:
	ILOAD a
fine:
	IRETURN
.end-method

.method div (a, b)
	ILOAD a
	ILOAD b
	ISUB
	IFLT stop
	LDC_W OBJREF
	ILOAD a
	ILOAD b
	ISUB
	ILOAD b
	INVOKEVIRTUAL div
	BIPUSH 1
	IADD
	GOTO fine
stop:
	BIPUSH 0x0
fine:
	IRETURN
.end-method

.method input()
	.var
		num
	.end-var

	BIPUSH 0x0
	ISTORE num

loop:
	IN
	DUP

	LDC_W ENDLINE
	ISUB
	IFEQ stop

	BIPUSH 0x30
	ISUB

	LDC_W OBJREF
	ILOAD num
	BIPUSH 10
	INVOKEVIRTUAL mul

	IADD
	ISTORE num
	GOTO loop

stop:
	ILOAD num
	IRETURN

.end-method


.method print(x)
	ILOAD x
	IFEQ printz

	LDC_W OBJREF
	ILOAD x
	INVOKEVIRTUAL print_digits
	GOTO end
printz:
	BIPUSH 0x30
	OUT
end:

	BIPUSH 0
	IRETURN
.end-method

.method print_digits(x)
	.var
		char
	.end-var

	ILOAD x
	IFEQ end

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL mod

	BIPUSH 0x30
	IADD
	ISTORE char

	LDC_W OBJREF
	ILOAD x
	BIPUSH 10
	INVOKEVIRTUAL div

	LDC_W OBJREF
	SWAP
	INVOKEVIRTUAL print_digits

	ILOAD char
	OUT

end:
	BIPUSH 0
	IRETURN
.end-method